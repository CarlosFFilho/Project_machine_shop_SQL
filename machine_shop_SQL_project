-- criação do banco de dados para o cenário de uma Oficina

create database machine_shop;

use machine_shop;

-- criação da tabela veículo

create table vehicle (
		vehicle_id int auto_increment primary key,
        type_vehicle enum ("Carro", "Moto", "Caminhão") not null,
        license_plate char(7),
        brand varchar(10),
        model varchar(10),
        year int);

-- criação da tabela mecânico

create table mechanic(
        id_mechanic int auto_increment primary key,
        mechanic_name varchar(30) not null,
        contact char(9),
        years_experience int);

-- criação da tabela cliente

create table client (
		client_id int auto_increment primary key,
        name_client varchar (30) not null,
        client_vehicle_id int not null,
        mechanic_id int,
        payment_cost float not null,
        service_hour float not null,
        constraint fk_client_vehicle foreign key (client_vehicle_id) references vehicle(vehicle_id),
        constraint fk_client_mechanic foreign key (mechanic_id) references mechanic(id_mechanic));

-- criação da tabela dimensões dos veículos
        
create table vehicle_dimensions (
		vehicle_dimensions_id int auto_increment primary key,
        vd_vehicle_id int,
        length float not null,
        weight float not null,
        constraint fk_dimensions_vehicle foreign key (vd_vehicle_id) references vehicle(vehicle_id));


-- inserindo dados no banco de dados MySQL

use machine_shop;


-- tabela veículo

INSERT INTO vehicle (vehicle_id, type_vehicle, license_plate, brand, model, year)
					VALUES (default, "Carro", "AAA1234", "Marca A", "Modelo 1", 2016),
                    (default, "Carro", "BBB1234", "Marca B", "Modelo 2", 2020),
                    (default, "Caminhão", "CCC1234", "Marca C", "Modelo 3", 2019),
                    (default, "Carro", "DDD1234", "Marca D", "Modelo 4", 2022),
                    (default, "Moto", "EEE1234", "Marca E", "Modelo 5", 2012),
                    (default, "Caminhão", "FFF1234", "Marca F", "Modelo 6", 2020),
                    (default, "Moto", "GGG1234", "Marca G", "Modelo 7", 2019);


-- tabela mecânico

INSERT INTO mechanic (id_mechanic, mechanic_name, contact, years_experience)
					VALUES (default, "João Silva", "123456789", 8),
                    (default, "Danilo Oliveira", "234567890", 1),
                    (default, "Everton Lira", "345678901", 4),
                    (default, "Renan Pereira", "456789012", 0.5),
                    (default, "Severino Fernandes", "567890123", 12);


-- tabela clientes

INSERT INTO client (client_id, name_client, client_vehicle_id, mechanic_id, payment_cost, service_hour)
					VALUES (default, "Marcos Santos",  2, 2, 1000, 4),
                    (default, "Luiza Mendes",  4, 5, 200, 2),
                    (default, "Roberto Lages",  1, 1, 500, 1),
                    (default, "Rodrigo Gomes",  3, 5, 80, 3),
                    (default, "Telma Oliveira",  6, 4, 700, 5),
                    (default, "Paulo Henrique",  5, 4, 1200, 8),
                    (default, "Gilmar Resende",  7, 3, 820, 3);


-- tabela dimensões de veículos

INSERT INTO vehicle_dimensions (vehicle_dimensions_id, vd_vehicle_id, length, weight)
					VALUES (default, 7, 1.3, 185),
                    (default, 5, 1.5, 200),
                    (default, 3, 5.5, 3000),
                    (default, 2, 2.8, 1000),
                    (default, 6, 6, 3600),
                    (default, 4, 3, 1100),
                    (default, 1, 2.5, 900);


-- fazendo consultas no banco de dados

use machine_shop;


-- 1. recuperações simples com SELECT Statement

SELECT type_vehicle, license_plate FROM vehicle;

SELECT mechanic_name, contact FROM mechanic;

SELECT name_client, payment_cost FROM client;

SELECT vd_vehicle_id, length, weight FROM vehicle_dimensions;


-- 2. filtros com WHERE Statement

SELECT type_vehicle, license_plate FROM vehicle WHERE type_vehicle = "Carro";

SELECT mechanic_name, contact FROM mechanic WHERE years_experience<5;

SELECT name_client, payment_cost FROM client WHERE payment_cost>=500;

SELECT vd_vehicle_id, length, weight FROM vehicle_dimensions WHERE length<4;


-- 3. expressões para gerar atributos derivados

SELECT payment_cost, service_hour, (payment_cost/service_hour) AS cost_for_time_service FROM client;

SELECT length, weight, (weight/length) AS weight_for_length FROM vehicle_dimensions;

SELECT years_experience,
       CASE 
           WHEN years_experience >= 10 THEN 'High experience'
           WHEN years_experience >= 5 THEN 'Medium experience'
           ELSE 'Low experience'
       END AS classification_experience
FROM mechanic;


-- 4. ordenações dos dados com ORDER BY

SELECT type_vehicle, license_plate FROM vehicle WHERE type_vehicle = "Carro" ORDER BY license_plate;

SELECT mechanic_name, contact FROM mechanic WHERE years_experience<5 ORDER BY mechanic_name;

SELECT name_client, payment_cost FROM client WHERE payment_cost>=500 ORDER BY payment_cost;

SELECT vd_vehicle_id, length, weight FROM vehicle_dimensions WHERE length<4 ORDER BY weight;


-- 5. condições de filtros aos grupos – HAVING Statement

SELECT name_client, payment_cost FROM client
HAVING payment_cost > 800;

SELECT vd_vehicle_id, length, weight FROM vehicle_dimensions
HAVING weight > 500 AND weight<=1100;


-- 6. junções entre tabelas para fornecer uma perspectiva mais complexa dos dados

SELECT client.name_client, mechanic.mechanic_name FROM client
INNER JOIN mechanic ON client.mechanic_id = mechanic.id_mechanic;

SELECT client.name_client, vehicle.license_plate FROM client
INNER JOIN vehicle ON client.client_vehicle_id = vehicle.vehicle_id;

SELECT vehicle.license_plate, vehicle_dimensions.weight FROM vehicle
INNER JOIN vehicle_dimensions ON vehicle.vehicle_id = vehicle_dimensions.vd_vehicle_id;
